#!/usr/bin/env python3

import sys
import subprocess
import json


#Executes any number of bash commands, one on each line
def bash_execute(commands):
    commands = commands.split('\n')
    last_output = ''
    for command in commands:
        last_output = subprocess.run(command.split(' '), stdout=subprocess.PIPE, text=True).stdout
    return last_output




#Generating diff for two directories

if( len(sys.argv) < 2 ):
    raise Exception("Please input base directory.")
elif( len(sys.argv) < 3 ):
    raise Exception("Please input directory to be compared with.")


base_dir = sys.argv[1]
comp_dir = sys.argv[2]

base_dir_list = bash_execute(f'ls -a {base_dir}')
base_dir_list = base_dir_list.split('\n')[2:-1]

comp_dir_list = bash_execute(f'ls -a {comp_dir}')
comp_dir_list = comp_dir_list.split('\n')[2:-1]




def generate_file_diffs( base_dir_list, comp_dir_list ):
    files_to_delete = []
    files_to_add = []  #format: [[fiilename, file content], ...]
    diffs_similar_files = [] #format: [[fiilename, diff info], ...]

    #When basefile has an additional file
    for file in base_dir_list:
        if file not in comp_dir_list:
            files_to_delete.append(file)
            base_dir_list.remove(file)

    #when compfile has an additional file
    for file in comp_dir_list:
        if file not in base_dir_list:
            file_content = bash_execute(f"cat {comp_dir}/{file}")
            files_to_add.append([file, file_content])

    #list diffs of the files which have same names
    for file in base_dir_list:
        file_diff = bash_execute(f"diff {base_dir}/{file} {comp_dir}/{file}")
        diffs_similar_files.append([file, file_diff])


    #packaging everything into a diff dictionary
    diff = {"files_to_add": files_to_add, "files_to_delete": files_to_delete, "file_diffs": diffs_similar_files}
    return diff






















